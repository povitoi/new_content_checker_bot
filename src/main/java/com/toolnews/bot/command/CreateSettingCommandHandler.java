package com.toolnews.bot.command;

import com.toolnews.bot.BotUtils;
import com.toolnews.bot.entity.SiteSettingEntity;
import com.toolnews.bot.entity.enumeration.CreateSettingState;
import com.toolnews.bot.entity.enumeration.IntervalUnit;
import com.toolnews.bot.entity.enumeration.LinkType;
import com.toolnews.bot.entity.enumeration.TimeSettingOption;
import com.toolnews.bot.repository.SiteSettingRepository;
import com.toolnews.bot.scheduler.SchedulerManager;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardRow;

import java.io.IOException;
import java.net.URL;
import java.sql.Time;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeParseException;

@Service
@RequiredArgsConstructor
@Slf4j
public class CreateSettingCommandHandler implements CommandHandler {

    private final SiteSettingRepository siteSettingRepository;
    private final SchedulerManager schedulerManager;

    public static CreateSettingState state = CreateSettingState.CREATED;

    private String listUrl;
    private String elementUrl;
    private String elementWrapper;
    private LinkType linkType;
    private TimeSettingOption timeSettingOption;
    private IntervalUnit intervalUnit;
    private Time newsCheckTime;
    private Integer everyTimeValue;

    private SiteSettingEntity siteSettingEntity;


    public void resetStateSettingCreation() {

        state = CreateSettingState.CREATED;
        listUrl = null;
        elementUrl = null;
        elementWrapper = null;
        linkType = null;
        timeSettingOption = null;
        intervalUnit = null;
        newsCheckTime = null;
        everyTimeValue = null;
        siteSettingEntity = null;

    }

    public String handle() {

        switch (state) {

            case CREATED -> {
                return """
                        –°–æ–∑–¥–∞—é —Å–≤—è–∑–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ ‚öôÔ∏è
                        """;
            }
            case WAITING_LIST_URL -> {
                return """
                        1. –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π üìù
                        """;
            }
            case WAITING_LAST_ELEMENT_URL -> {
                return """
                        2. –¢–µ–ø–µ—Ä—å —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–æ–≤–µ–π—à—É—é –∏–∑ –Ω–∏—Ö ‚úçÔ∏è
                        """;
            }
            case WAITING_TIME -> {
                return """
                        3. –í—Ä–µ–º—è –∏–ª–∏ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ üï∞
                        """;
            }
            case WAITING_TIME_UNIT -> {
                return """
                        4. –í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ üìÜ
                        """;
            }
            case READY -> {
                return """
                        –°–≤—è–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∏ –∑–∞–ø—É—â–µ–Ω–∞ üöÄ
                        –ï–µ –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ üìã
                        """;
            }

        }

        return "";

    }

    public InlineKeyboardMarkup getKeyboardForState() {

        if (state == CreateSettingState.WAITING_TIME_UNIT) {

            return InlineKeyboardMarkup
                    .builder()
                    .keyboardRow(
                            new InlineKeyboardRow(
                                    InlineKeyboardButton
                                            .builder()
                                            .text("–ß–∞—Å")
                                            .callbackData("h")
                                            .build(),
                                    InlineKeyboardButton
                                            .builder()
                                            .text("–î–µ–Ω—å")
                                            .callbackData("d")
                                            .build())
                    )
                    .keyboardRow(
                            new InlineKeyboardRow(
                                    InlineKeyboardButton
                                            .builder()
                                            .text("–ú–∏–Ω—É—Ç–∞")
                                            .callbackData("m")
                                            .build()
                            )
                    ).build();
        }

        return InlineKeyboardMarkup.builder().build();

    }

    public String fillListUrl(String url) {

        if (invalidUrl(url)) {
            return """
                    –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ ü´¢
                    
                    –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –Ω–∞ http:// –∏–ª–∏ https://
                    
                    –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, —ç—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ üòå
                    """;
        }

        listUrl = url;
        return "";
    }

    public String fillLastElementUrl(String url) {

        if (invalidUrl(url)) {
            return """
                    –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ ü§®
                    
                    –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –Ω–∞ http:// –∏–ª–∏ https://
                    
                    –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, —ç—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ üôÇ
                    """;
        }

        if (invalidUrlChain(url)) {
            return """
                    –í—ã –≤–≤–µ–ª–∏ —Å—Å—ã–ª–∫–∏ —Å —Ä–∞–∑–Ω—ã—Ö —Å–∞–π—Ç–æ–≤ ü§®
                    
                    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏.
                    """;
        }

        elementUrl = url;
        elementWrapper = getElementWrapper(listUrl, elementUrl);

        if (elementWrapper == null || elementWrapper.isEmpty()) {
            return """
                    –í–æ –≤—Ä–µ–º—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏—Ö –∑–∞–Ω–æ–≤–æ, –±—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –≤—Å—Ç–∞–≤–∫–µ —Å—Å—ã–ª–æ–∫.
                    """;
        }

        return "";

    }

    public String fillTime(String time) {

        if (invalidTime(time) && invalidInteger(time)) {
            return """
                    –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ üßê
                    
                    –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ 24-—á–∞—Å–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –ª–∏–±–æ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 30
                    """;
        }

        timeSettingOption = getTimeSettingOption(time);

        if (timeSettingOption == TimeSettingOption.TIME_OF_DAY) {

            newsCheckTime = Time.valueOf(LocalTime.parse(time));
            return "0";

        } else {

            everyTimeValue = Integer.parseInt(time);
            return "1";

        }

    }

    public void fillTimeUnit(String unit) {

        intervalUnit = getIntervalUnit(unit);

    }

    @Transactional
    public void settingIsReady() {

        if (timeSettingOption == TimeSettingOption.TIME_OF_DAY) {
            siteSettingEntity = SiteSettingEntity
                    .builder()
                    .running(true)
                    .settingCreated(Timestamp.valueOf(LocalDateTime.now()))
                    .listUrl(listUrl)
                    .elementUrl(elementUrl)
                    .timeSettingOption(timeSettingOption)
                    .newsCheckTime(newsCheckTime)
                    .lastCheck(Timestamp.valueOf(LocalDateTime.now()))
                    .elementWrapper(elementWrapper)
                    .linkType(linkType)
                    .build();
        } else if (timeSettingOption == TimeSettingOption.INTERVAL) {
            siteSettingEntity = SiteSettingEntity
                    .builder()
                    .running(true)
                    .settingCreated(Timestamp.valueOf(LocalDateTime.now()))
                    .listUrl(listUrl)
                    .elementUrl(elementUrl)
                    .timeSettingOption(timeSettingOption)
                    .intervalUnit(intervalUnit)
                    .everyTimeValue(everyTimeValue)
                    .lastCheck(Timestamp.valueOf(LocalDateTime.now()))
                    .elementWrapper(elementWrapper)
                    .linkType(linkType)
                    .build();
        }

        siteSettingRepository.save(siteSettingEntity);
        schedulerManager.runThisSettingInScheduler(siteSettingEntity);

    }

    private String getElementWrapper(String url, String elUrl) {

        try {

            Document document = Jsoup.connect(url).get();
            Element element = document.selectFirst("a[href='" + elUrl + "']");

            if (element != null) {

                linkType = LinkType.ABSOLUTE;

                return findClassName(element);

            } else {

                linkType = LinkType.RELATIVE;

                elUrl = new URL(elUrl).getFile().replaceFirst("^/", "");
                element = document.selectFirst("a[href*='" + elUrl + "']");

                return findClassName(element);

            }

        } catch (IOException e) {
            log.error("An error occurred while trying to retrieve a document from the network. Stacktrace = {}",
                    e.getMessage());
        } catch (NullPointerException e) {
            log.error("An error occurred while trying to retrieve the tag class. Stacktrace = {}",
                    e.getMessage());
            resetStateSettingCreation();
            return null;
        }
        return null;
    }

    private String findClassName(Element element) throws NullPointerException {
        String className = element.attr("class");
        if (className.isEmpty()) {
            while (className.isEmpty()) {
                if (element != null) {
                    element = element.parent();
                    if (element != null)
                        className = element.attr("class");
                }
            }
        }
        return className;
    }

    private boolean invalidUrl(String url) {
        return BotUtils.toUrl(url) == null;
    }

    private boolean invalidUrlChain(String url) {

        String listHost = BotUtils.toUrl(listUrl).getHost();
        String elementHost = BotUtils.toUrl(url).getHost();

        return !listHost.equals(elementHost);

    }

    private TimeSettingOption getTimeSettingOption(String value) {

        if (!invalidTime(value))
            return TimeSettingOption.TIME_OF_DAY;
        else
            return TimeSettingOption.INTERVAL;

    }

    private IntervalUnit getIntervalUnit(String callbackData) {

        if (callbackData.equalsIgnoreCase("m"))
            return IntervalUnit.MINUTE;
        else if (callbackData.equalsIgnoreCase("h"))
            return IntervalUnit.HOUR;
        else
            return IntervalUnit.DAY;

    }

    private boolean invalidTime(String value) {
        try {
            LocalTime.parse(value);
            return false;
        } catch (DateTimeParseException e) {
            return true;
        }
    }

    private boolean invalidInteger(String value) {
        try {
            int number = Integer.parseInt(value);
            return (number > 30) || (number < 1);
        } catch (NumberFormatException e) {
            return true;
        }
    }

}